@page "/todos"
@attribute [Authorize]
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using TodoApi.Shared.Models
@using TodoApi.Client.Services
@inject AuthenticationStateProvider _authStateProv
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient


<AuthorizeView>
    <div class="row mx-2 mb-2 justify-content-md-center">
        <div class="col"></div>
        <div class="col-md-4">
            @foreach (var todoItem in todos)
            {
                <Todo
                    @key="todoItem"
                    nowEditedId="@nowEditedId"
                    todo="@todoItem"
                    OnManage="@SetManageId"
                    OnDelete="@DeleteItem"
                    OnPut="@PutItem"
                    OnGet="@GetItem">
                </Todo>
            }
            <TodoAdd
                nowEditedId="@nowEditedId"
                OnManage="@SetManageId"
                OnPost="@PostItem">
            </TodoAdd>
        </div>
        <div class="col"></div>
    </div>
</AuthorizeView>

@code {
    private List<TodoViewModel> todos { get; set; }
    private long nowEditedId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        /*JWTAuthStateProvider _jwtAuthStateProv = new JWTAuthStateProvider(_jsRuntime);
        
        _jwtAuthStateProv = _authStateProv as JWTAuthStateProvider;

        var token = await _jwtAuthStateProv.GetTokenAsync();

        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            
        todos = await _httpClient.GetFromJsonAsync<List<TodoViewModel>>("/api/TodoItems");*/
            
        todos = new List<TodoViewModel>
            {
                new TodoViewModel{ Id = 1, Name = "Walk the dog", IsComplete = false},
                new TodoViewModel{ Id = 2, Name = "Clean the house", IsComplete = true},
                new TodoViewModel{ Id = 3, Name = "Empty the bin", IsComplete = false},
                new TodoViewModel{ Id = 4, Name = "Do the groceries", IsComplete = true}
            };
        await Task.FromResult(0);
    }

    private void SetManageId(long Id)
    {
        nowEditedId = Id;
    }
    private async Task DeleteItem(TodoViewModel todo)
    {
        //var response = await _httpClient.DeleteAsync($"/api/TodoItems/{todo.Id}");
        //var content = await response.Content.ReadFromJsonAsync<MessageViewModel>();
        await Task.FromResult(0);
    }
    private async Task PutItem(TodoViewModel todo)
    {
        //var response = await _httpClient.PutAsJsonAsync($"/api/TodoItems/{todo.Id}", todo);
        //var content = await response.Content.ReadFromJsonAsync<TodoViewModel>();
        await Task.FromResult(0);
    }
    private async Task GetItem(TodoViewModel todo)
    {
        //todo = await _httpClient.GetFromJsonAsync<TodoViewModel>($"/api/TodoItems/{todo.Id}");
        await Task.FromResult(0);
    }
    private async Task PostItem(TodoViewModel todo)
    {
        //todo = await _httpClient.PutAsJsonAsync($"/api/TodoItems", todo);
        await Task.FromResult(0);
    }
}
