@page "/todos"
@attribute [Authorize]
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using TodoApi.Shared.Models
@using TodoApi.Client.Services
@inject AuthenticationStateProvider _authStateProv
@inject HttpClient _httpClient


<div class="row mx-2 mb-2 justify-content-md-center">
    <div class="col"></div>
    <div class="col-md-4">
        @foreach (var todoItem in todos)
        {
            <Todo
                @key="todoItem"
                nowEditedId="@nowEditedId"
                todo="@todoItem"
                OnManage="@SetManageId"
                OnDelete="@DeleteItem"
                OnPut="@PutItem"
                OnGet="@GetItem">
            </Todo>
        }
        <TodoAdd
            nowEditedId="@nowEditedId"
            OnManage="@SetManageId"
            OnPost="@PostItem">
        </TodoAdd>
    </div>
    <div class="col"></div>
</div>

@code {
    private List<TodoViewModel> todos { get; set; }
    private long nowEditedId { get; set; }

    //just for temp
    private long currentId = 5;
    
    protected override async Task OnInitializedAsync()
    {
        /* JWTAuthStateProvider _jwtAuthStateProv = _authStateProv as JWTAuthStateProvider;
        var token = await _jwtAuthStateProv.GetTokenAsync();
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            
        todos = await _httpClient.GetFromJsonAsync<List<TodoViewModel>>("/api/TodoItems"); */
            
        todos = new List<TodoViewModel>
        {
            new TodoViewModel{ Id = 1, Name = "Walk the dog", IsComplete = false},
            new TodoViewModel{ Id = 2, Name = "Clean the house", IsComplete = true},
            new TodoViewModel{ Id = 3, Name = "Empty the bin", IsComplete = false},
            new TodoViewModel{ Id = 4, Name = "Do the groceries", IsComplete = true}
        };
        await Task.FromResult(0);
    }

    private void SetManageId(long Id)
    {
        nowEditedId = Id;
    }
    private async Task DeleteItem(TodoViewModel todo)
    {
        JWTAuthStateProvider _jwtAuthStateProv = _authStateProv as JWTAuthStateProvider;
        var token = await _jwtAuthStateProv.GetTokenAsync();
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);

        var response = await _httpClient.DeleteAsync($"/api/TodoItems/{todo.Id}");
        var content = await response.Content.ReadFromJsonAsync<MessageViewModel>();
        var todoMod = todos.Find(x => x.Id == todo.Id);
        todos.Remove(todoMod);
    }
    private async Task PutItem(TodoViewModel todo)
    {
        JWTAuthStateProvider _jwtAuthStateProv = _authStateProv as JWTAuthStateProvider;
        var token = await _jwtAuthStateProv.GetTokenAsync();
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);

        var response = await _httpClient.PutAsJsonAsync($"/api/TodoItems/{todo.Id}", new TodoViewModel{Name = todo.Name, IsComplete = todo.IsComplete});
        var content = await response.Content.ReadFromJsonAsync<TodoViewModel>();
        var todoMod = todos.Find(x => x.Id == todo.Id);
        todoMod.Name = content.Name;
        todoMod.IsComplete = content.IsComplete;
    }
    private async Task GetItem(TodoViewModel todo)
    {
        JWTAuthStateProvider _jwtAuthStateProv = _authStateProv as JWTAuthStateProvider;
        var token = await _jwtAuthStateProv.GetTokenAsync();
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);

        var content = await _httpClient.GetFromJsonAsync<TodoViewModel>($"/api/TodoItems/{todo.Id}");
        var todoMod = todos.Find(x => x.Id == todo.Id);
        todoMod.Name = content.Name;
        todoMod.IsComplete = content.IsComplete;
    }
    private async Task PostItem(TodoViewModel todo)
    {
        JWTAuthStateProvider _jwtAuthStateProv = _authStateProv as JWTAuthStateProvider;
        var token = await _jwtAuthStateProv.GetTokenAsync();
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            
        var response = await _httpClient.PostAsJsonAsync("/api/TodoItems", new TodoViewModel{Name = todo.Name, IsComplete = todo.IsComplete});
        var content = await response.Content.ReadFromJsonAsync<TodoViewModel>();
        todos.Add(new TodoViewModel{ Id = content.Id, Name = content.Name, IsComplete = content.IsComplete});
        currentId++;
    }
}
