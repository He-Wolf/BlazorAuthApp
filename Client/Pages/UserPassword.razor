@attribute [Authorize]
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using TodoApi.Shared.Models
@using TodoApi.Client.Services
@inject AuthenticationStateProvider _authStateProv
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient


<EditForm Model="@password" OnValidSubmit="Apply">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row">
        <label for="inputCurrentPassword" class="col-sm-6 col-form-label">Current Password:</label>
        <div class="col-sm-6">
            <input type="password" @attributes="InputAttributes" id="inputCurrentPassword" @bind-value="password.CurrentPassword"/>
        </div>
        <ValidationMessage For="@(() => password.CurrentPassword)" />
    </div>
    <div class="form-group row">
        <label for="input1newPassword" class="col-sm-6 col-form-label">New Password:</label>
        <div class="col-sm-6">
            <input type="password" @attributes="InputAttributes" id="inputNewPassword" @bind-value="password.NewPassword"/>
        </div>
        <ValidationMessage For="@(() => password.NewPassword)" />
    </div>
    <div class="form-group row">
        <label for="inputConfirmNewPassword" class="col-sm-6 col-form-label">Confirm New Password:</label>
        <div class="col-sm-6">
            <input type="password" @attributes="InputAttributes" id="inputConfirmNewPassword" @bind-value="password.ConfirmNewPassword"/>
        </div>
        <ValidationMessage For="@(() => password.ConfirmNewPassword)" />
    </div>
    @if(!ifEdit)
    {
        <button type="button" class="btn btn-primary" @onclick="@(() => { Edit(); })">Edit</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary">Apply</button>
        <button type="button" class="btn btn-secondary" @onclick="@(() => { Cancel(); })">Cancel</button>
    }
</EditForm>
                

@code{
    private PasswordViewModel password = new PasswordViewModel
    {
    CurrentPassword = "********",
    NewPassword = "********",
    ConfirmNewPassword = "********"
    };
    private bool ifEdit = false;
    private Dictionary<string, object> InputAttributes { get; set; } =
        new Dictionary<string, object>()
        {
            { "readonly", "readonly" },
            { "class", "form-control-plaintext" }
        };

    protected override async Task OnInitializedAsync()
    {
        JWTAuthStateProvider _jwtAuthStateProv = new JWTAuthStateProvider(_jsRuntime);
        _jwtAuthStateProv = _authStateProv as JWTAuthStateProvider;
        var token = await _jwtAuthStateProv.GetTokenAsync();
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
    }
    
    private async Task Apply()
    {
        var response = await _httpClient.PutAsJsonAsync("/Account/ChangePassword", password);
        var content = await response.Content.ReadFromJsonAsync<MessageViewModel>();
        Console.WriteLine(content.message);
        
        ifEdit = false;
        InputAttributes.Add("readonly", "readonly");
        InputAttributes["class"] = "form-control-plaintext";
        password.CurrentPassword = "********";
        password.NewPassword = "********";
        password.ConfirmNewPassword = "********";
    }
    private void Cancel()
    {
        ifEdit = false;
        InputAttributes.Add("readonly", "readonly");
        InputAttributes["class"] = "form-control-plaintext";
        password.CurrentPassword = "********";
        password.NewPassword = "********";
        password.ConfirmNewPassword = "********";
    }
    private void Edit()
    {
        ifEdit = true;
        InputAttributes.Remove("readonly");
        InputAttributes["class"] = "form-control";
        password.CurrentPassword = "";
        password.NewPassword = "";
        password.ConfirmNewPassword = "";
    }
}