@attribute [Authorize]
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using TodoApi.Shared.Models
@using TodoApi.Client.Services
@inject AuthenticationStateProvider _authStateProv
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient


<EditForm Model="@password" OnValidSubmit="Apply">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <div class="form-group">
            <label for="inputCurrentPassword">Current Password</label>
            <input type="password" class="form-control" id="inputCurrentPassword" @bind-value="password.CurrentPassword">
            <ValidationMessage For="@(() => password.CurrentPassword)" />
        </div>
        <div class="form-group">
            <label for="input1newPassword">New Password</label>
            <input type="password" class="form-control" id="inputNewPassword" @bind-value="password.NewPassword">
            <ValidationMessage For="@(() => password.NewPassword)" />
        </div>
        <div class="form-group">
            <label for="inputConfirmNewPassword">Confirm New Password</label>
            <input type="password" class="form-control" id="inputConfirmNewPassword" @bind-value="password.ConfirmNewPassword">
            <ValidationMessage For="@(() => password.ConfirmNewPassword)" />
        </div>
    <button type="button" class="btn btn-primary" @onclick="@(() => { Edit(); })">Edit</button>
    <button type="submit" class="btn btn-primary">Apply</button>
    <button type="button" class="btn btn-secondary" @onclick="@(() => { Cancel(); })">Cancel</button>
</EditForm>
                

@code{
    
    PasswordViewModel password = new PasswordViewModel();

    protected override async Task OnInitializedAsync()
    {
        JWTAuthStateProvider _jwtAuthStateProv = new JWTAuthStateProvider(_jsRuntime);
        
        _jwtAuthStateProv = _authStateProv as JWTAuthStateProvider;

        var token = await _jwtAuthStateProv.GetTokenAsync();

        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            
        password = await _httpClient.GetFromJsonAsync<PasswordViewModel>("/Account/ChangePassword");
    }
    
    private void Apply()
    {
        //
    }
    private void Cancel()
    {
        //
    }
    private void Edit()
    {
        //
    }
}