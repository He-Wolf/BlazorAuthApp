@attribute [Authorize]
@using System.Net.Http
@using System.Net.Http.Json
@using TodoApi.Shared.Models
@inject HttpClient _httpClient


@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@user" OnValidSubmit="Apply">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group row">
            <label for="inputFirstname" class="col-sm-3 col-form-label">Firstname:</label>
            <div class="col-sm-9">
                <input type="text" @attributes="InputAttributes" id="inputFirstname" @bind-value="user.FirstName"/>
            </div>
            <ValidationMessage For="@(() => user.FirstName)" />
        </div>
        <div class="form-group row">
            <label for="inputLastname" class="col-sm-3 col-form-label">Lastname:</label>
            <div class="col-sm-9">
                <input type="text" @attributes="InputAttributes" id="inputLastname" @bind-value="user.LastName"/>
            </div>
            <ValidationMessage For="@(() => user.LastName)" />
        </div>
        <div class="form-group row">
            <label for="inputEmail" class="col-sm-3 col-form-label">Email:</label>
            <div class="col-sm-9">
                <input type="email" @attributes="InputAttributes" id="inputEmail" @bind-value="user.Email"/>
            </div>
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        @if(!ifEdit)
        {
            <button type="button" class="btn btn-primary" @onclick="@(() => { Edit(); })">Edit</button>
        }
        else
        {
            <button type="submit" class="btn btn-primary">Apply</button>
            <button type="button" class="btn btn-secondary" @onclick="@(async() => { await Cancel(); })">Cancel</button>
        }
    </EditForm>
}
                

@code{
    private DisplayViewModel user { get; set; }
    private bool ifEdit = false;
    private Dictionary<string, object> InputAttributes { get; set; } =
        new Dictionary<string, object>()
        {
            { "readonly", "readonly" },
            { "class", "form-control-plaintext" }
        };
    
    protected override async Task OnInitializedAsync()
    {
        user = await _httpClient.GetFromJsonAsync<DisplayViewModel>("/Account/Display");
    }
    
    private async Task Apply()
    {
        var response = await _httpClient.PutAsJsonAsync("/Account/Edit", user);
        var content = await response.Content.ReadFromJsonAsync<DisplayViewModel>();

        ifEdit = false;
        InputAttributes.Add("readonly", "readonly");
        InputAttributes["class"] = "form-control-plaintext";
        user = await _httpClient.GetFromJsonAsync<DisplayViewModel>("/Account/Display");
    }
    private async Task Cancel()
    {
        ifEdit = false;
        InputAttributes.Add("readonly", "readonly");
        InputAttributes["class"] = "form-control-plaintext";
        user = await _httpClient.GetFromJsonAsync<DisplayViewModel>("/Account/Display");
    }
    private void Edit()
    {
        ifEdit = true;
        InputAttributes.Remove("readonly");
        InputAttributes["class"] = "form-control";
    }
}